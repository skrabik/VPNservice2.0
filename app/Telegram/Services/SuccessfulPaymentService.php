<?php

namespace App\Telegram\Services;

use App\Models\Customer;
use App\Models\Plan;
use App\Models\PaymentMethod;
use Illuminate\Support\Facades\Log;
use Telegram\Bot\Laravel\Facades\Telegram;
use Telegram\Bot\Objects\Update;

class SuccessfulPaymentService
{
    public static function process(Update $update, Customer $customer): void
    {
        try {
            $successful_payment = $update->getMessage()->getSuccessfulPayment();

            if (! $successful_payment) {
                Log::error('Successful payment not found in update');

                return;
            }

            $payload = json_decode($successful_payment->getInvoicePayload(), true);

            $plan = Plan::find((int) $payload['plan_id']);

            $payment_method = PaymentMethod::find((int) $payload['payment_method_id']);

            if (! $plan) {
                Log::error("Plan not found with ID: {$plan->id}");

                Telegram::sendMessage([
                    'chat_id' => $customer->telegram_id,
                    'text' => '‚ùå –û—à–∏–±–∫–∞: –ø–ª–∞–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.',
                    'parse_mode' => 'HTML',
                ]);

                return;
            }

            $new_subscription = $customer->subscriptions()->create([
                'plan_id' => $plan->id,
                'date_start' => now()->startOfDay(),
                'date_end' => now()->endOfDay()->addDays($plan->period),
            ]);

            $customer->payments()->create([
                'subscription_id' => $customer->subscriptions()->latest()->first()->id,
                'amount' => $plan->stars,
                'currency' => 'XTR',
                'transaction_id' => $successful_payment->getTelegramPaymentChargeId(),
                'payment_method_id' => $payment_method->id,
            ]);

            $message = "üéâ <b>–ü–æ–¥–ø–∏—Å–∫–∞ —É—Å–ø–µ—à–Ω–æ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞!</b>\n\n".
                "‚úÖ –í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –ø–ª–∞–Ω <b>{$plan->name}</b> –∞–∫—Ç–∏–≤–Ω–∞ –¥–æ {$new_subscription->date_end}\n\n".
                "üîë –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—É—á–∏—Ç—å –∫–ª—é—á VPN, –∏—Å–ø–æ–ª—å–∑—É—è –∫–æ–º–∞–Ω–¥—É:\n".
                "/key\n\n".
                '–ü–æ—Å–ª–µ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–ª—é—á–∞ —Å–ª–µ–¥—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º –ø–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—é –∫ VPN —Å–µ—Ä–≤–µ—Ä—É.';

            Telegram::sendMessage([
                'chat_id' => $customer->telegram_id,
                'text' => $message,
                'parse_mode' => 'HTML',
            ]);
        } catch (\Exception $ex) {
            Log::error('Error processing successful payment: '.$ex->getMessage());

            Telegram::sendMessage([
                'chat_id' => $customer->telegram_id,
                'text' => '‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–ª–∞—Ç–µ–∂–∞. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É.',
                'parse_mode' => 'HTML',
            ]);
        }
    }
}
